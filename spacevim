" Comment the following line if you don't want Vim and NeoVim to share the
" same plugin download directory.
let g:spacevim_plug_home = '~/.vim/plugged'

" Uncomment the following line to override the leader key. The default value is space key "<\Space>".
" let g:spacevim_leader = "<\Space>"

" Uncomment the following line to override the local leader key. The default value is comma ','.
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim.
" Refer to https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md for all available layers.
let g:spacevim_lsp_engine = 'coc'
let g:spacevim_layers = [
      \ 'fzf', 'better-defaults', 'which-key', 'airline', 'file-manager',
      \ 'git', 'better-motion', 'text-align',
      \ 'syntax-checking', 'editing', 'programming', 'lsp',
      \ 'ruby', 'rust', 'javascript', 'typescript', 'elixir', 'html', 'markdown',
      \ 'vue'
      \ ]

" Uncomment the following line if your terminal(-emulator) supports true colors.
let g:spacevim_enable_true_color = 1

" Uncomment the following if you have some nerd font installed.
let g:spacevim_nerd_fonts = 1
let g:spacevim_enable_startify = 0

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim.gui
"   Layer 'airline'
" endif

" Manage your own plugins.
" Refer to https://github.com/junegunn/vim-plug for more detials.
function! UserInit()
  " Add your own plugin via Plug command.
  " Plug 'junegunn/seoul256.vim'
  " Plug 'itchyny/calendar.vim'
  Plug 'janko-m/vim-test' " vim test
  Plug 'dracula/vim', { 'as': 'dracula' }
  Plug 'alvan/vim-closetag'
  Plug 'vim-scripts/BufOnly.vim'
  Plug 'christoomey/vim-tmux-runner'
  Plug 'mlaursen/vim-react-snippets'
  " Plug 'peitalin/vim-jsx-typescript'
endfunction


" Override the default settings from space-vim as well as adding extras
function! UserConfig()
  set pyx=3
  " colorscheme dracula
  hi Normal guibg=NONE ctermbg=NONE

  " Override the default settings.
  " Uncomment the following line to disable relative number.
  " set norelativenumber

  " autocmd FileType typescript let b:coc_root_patterns = ['.git', 'tsconfig.json']
  " autocmd FileType typescriptreact let b:coc_root_patterns = ['.git', 'tsconfig.json']
  " Adding extras.
  " Uncomment the following line If you have installed the powerline fonts.
  " It is good for airline layer.
  let g:airline_theme='dracula'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#ale#enabled = 1
  let g:airline#extensions#coc#enabled = 1
  set foldmethod=syntax
  vmap > >gv
  vmap <tab> >gv
  " outdent with < or shift-tab
  vmap < <gv
  vmap <S-Tab> <gv
  nmap <C-J> :m +1 <CR>
  nmap <C-K> :m -2 <CR>
  nmap <Leader>gl :GV --graph --abbrev-commit --decorate<cr>
  if has('nvim')
    tmap <C-o> <C-\><C-n>
  end

  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-s': 'split',
    \ 'ctrl-v': 'vsplit' }

  let g:fzf_buffers_jump = 1
  let g:ale_fixers = {
        \   '*': ['remove_trailing_lines', 'trim_whitespace'],
        \   'ruby': ['rubocop'],
        \   'javascript': ['prettier'],
        \   'javascriptreact': ['prettier'],
        \   'typescript': ['prettier'],
        \   'typescriptreact': ['prettier'],
        \   'json': ['prettier'],
        \   'elixir': ['mix_format'],
        \   'rust': ['rustc'],
        \   'vue': ['prettier', 'eslint'],
        \}
  let g:ale_fix_on_save = 1
  let g:ale_linter_aliases = {'typescriptreact': 'typescript'}
  let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.hbs,*.jsx,*.tsx,*.erb,*vue'
  let g:closetag_xhtml_filetypes = 'xhtml,jsx,tsx'
  let g:mustache_abbreviations = 1

  " yank that file name
  nnoremap <Leader>fy :let @*=expand("%")<CR>

  " Testing
  let g:test#runner_commands = ['RSpec', 'Jest']
  let g:test#strategy = "vtr"
  map <Leader>tf :TestFile<cr>
  map <Leader>tn :TestNearest<cr>
  map <Leader>tl :TestLast<cr>
  let test#ruby#rspec#executable = 'rspec'
  let test#ruby#rspec#options = {
    \ 'file':    '--format documentation',
    \}

  " VueJS
  " only highlight JS, css, html
  let g:vue_pre_processors = []
endfunction
